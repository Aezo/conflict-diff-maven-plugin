#!/bin/bash
set -o pipefail

# Color codes
GREY="\033[90m"
RESET="\033[0m"

# Help function
show_help() {
    cat << EOF
Maven Dependency Conflict Analyzer

DESCRIPTION:
    This script compares Maven dependency conflicts between two Git branches.
    It runs 'mvn dependency:tree' on both branches, extracts conflict information,
    and shows the differences between them.

USAGE:
    $(basename "$0") [BASE_BRANCH] [OPTIONS]

ARGUMENTS:
    BASE_BRANCH Base branch to compare against (defaults to 'develop')

OPTIONS:
    --help         Show this help message and exit
    --debug        Enable debug output to see detailed progress
    --no-clean-up  Skip cleanup of dependency tree files (requires --debug)

EXAMPLES:
    $(basename "$0")
        Compare current branch against 'develop' (default base branch)
    
    $(basename "$0") master
        Compare current branch against 'master'
    
    $(basename "$0") master --debug
        Compare against 'master' with detailed debug output
    
    $(basename "$0") master --debug --no-clean-up
        Compare against 'master' with debug output and skip cleanup
    
    $(basename "$0") --help
        Show this help message

WORKFLOW:
    1. Takes base branch as argument (defaults to 'develop')
    2. Switches to base branch and runs Maven dependency analysis
    3. Switches back to feature branch and runs the same analysis
    4. Compares the dependency conflicts between both branches
    5. Shows differences and cleans up temporary files

REQUIREMENTS:
    - Git repository
    - Maven project with pom.xml
    - 'mvn' command available in PATH

EOF
}

# Debug echo function - only prints if debug mode is enabled
debug_echo() {
    if [ "$DEBUG" = true ]; then
        echo -e "${GREY}$1${RESET}"
    fi
}

list_transitive_dependency_conflicts() {
    _BRANCH_NAME=$(git branch --show-current)
    _MAVEN_DEPENDENCY_TREE_FILE="${_CURRENT_PATH}/dependency_tree_${_BRANCH_NAME}.txt"
    _MAVEN_DEPENDENCY_TREE_CONFLICTS_FILE="${_CURRENT_PATH}/dependency_tree_conflicts_${_BRANCH_NAME}.txt"

    debug_echo "‚è≥ Running maven dependency tree and saving output to ${_MAVEN_DEPENDENCY_TREE_FILE}"

    mvn dependency:tree -Dverbose=true > ${_MAVEN_DEPENDENCY_TREE_FILE}

    if [ $? -ne 0 ]; then
        echo "‚ùå Maven dependency:tree command failed" >&2
        exit 3
    fi

    if [ ! -f "${_MAVEN_DEPENDENCY_TREE_FILE}" ]; then
        echo "‚ùå Dependency tree file was not created" >&2
        exit 4
    fi

    debug_echo "‚è≥ parsing for conflicts"

    cat ${_MAVEN_DEPENDENCY_TREE_FILE} | (grep -E "\bconflict with\b" || true) | perl -pe 's/.+\(([\w\.\-:]+.+conflict with [\d\.]+).+/$1/g' | sort | uniq -c | sort -nr > ${_MAVEN_DEPENDENCY_TREE_CONFLICTS_FILE}

    if [ $? -ne 0 ]; then
        echo "‚ùå Parsing for conflicts failed" >&2
        exit 5
    fi

    debug_echo "‚úÖ Saved to file ${_MAVEN_DEPENDENCY_TREE_CONFLICTS_FILE}"
}

# Parse command line arguments
DEBUG=false
NO_CLEANUP=false
BASE_BRANCH_ARG=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            exit 0
            ;;
        --debug)
            DEBUG=true
            shift
            ;;
        --no-clean-up)
            NO_CLEANUP=true
            shift
            ;;
        --*)
            echo "Unknown option $1" >&2
            exit 1
            ;;
        *)
            if [ -z "$BASE_BRANCH_ARG" ]; then
                BASE_BRANCH_ARG="$1"
            else
                echo "Too many arguments. Only one base branch argument is allowed." >&2
                exit 1
            fi
            shift
            ;;
    esac
done

# Validate that --no-clean-up is only used with --debug
if [ "$NO_CLEANUP" = true ] && [ "$DEBUG" = false ]; then
    echo "‚ùå --no-clean-up option can only be used with --debug mode" >&2
    exit 1
fi

_FEATURE_BRANCH_NAME=$(git branch --show-current)
_BASE_BRANCH_NAME="${BASE_BRANCH_ARG:-develop}"
_CURRENT_PATH=$(pwd)

if [ "${_FEATURE_BRANCH_NAME}" == "${_BASE_BRANCH_NAME}" ]; then
    echo "üõë Feature branch is ${_FEATURE_BRANCH_NAME}, which is the same as the base branch ${_BASE_BRANCH_NAME}. Exiting." >&2
    exit 0
fi

debug_echo "‚è≥ Checking out ${_BASE_BRANCH_NAME}"

git checkout ${_BASE_BRANCH_NAME} > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "‚ùå Checkout ${_BASE_BRANCH_NAME} failed" >&2
    exit 1
fi

list_transitive_dependency_conflicts

debug_echo "‚è≥ Checking out ${_FEATURE_BRANCH_NAME}"

git checkout ${_FEATURE_BRANCH_NAME} > /dev/null 2>&1

if [ $? -ne 0 ]; then
    echo "‚ùå Checkout ${_FEATURE_BRANCH_NAME} failed" >&2
    exit 2
fi

list_transitive_dependency_conflicts

debug_echo "‚è≥ Comparing dependency conflicts between ${_BASE_BRANCH_NAME} and ${_FEATURE_BRANCH_NAME}"

diff --color=always ${_CURRENT_PATH}/dependency_tree_conflicts_${_BASE_BRANCH_NAME}.txt ${_CURRENT_PATH}/dependency_tree_conflicts_${_FEATURE_BRANCH_NAME}.txt
_DIFF_EXIT_CODE=$?

if [ $_DIFF_EXIT_CODE -eq 0 ]; then
    debug_echo "‚úÖ No differences in dependency conflicts found"
elif [ $_DIFF_EXIT_CODE -eq 1 ]; then
    debug_echo "‚ö†Ô∏è Differences in dependency conflicts found between branches"
elif [ $_DIFF_EXIT_CODE -eq 2 ]; then
    echo "‚ùå Diff command failed (file not found or other error)" >&2
    exit 6
fi

if [ "$NO_CLEANUP" = false ]; then
    debug_echo "‚è≥ Cleaning up"

    debug_echo "‚è≥ Deleting ${_CURRENT_PATH}/dependency_tree_${_BASE_BRANCH_NAME}.txt"
    rm ${_CURRENT_PATH}/dependency_tree_${_BASE_BRANCH_NAME}.txt

    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to delete ${_CURRENT_PATH}/dependency_tree_${_BASE_BRANCH_NAME}.txt" >&2
        exit 7
    fi

    debug_echo "‚è≥ Deleting ${_CURRENT_PATH}/dependency_tree_conflicts_${_BASE_BRANCH_NAME}.txt"
    rm ${_CURRENT_PATH}/dependency_tree_conflicts_${_BASE_BRANCH_NAME}.txt

    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to delete ${_CURRENT_PATH}/dependency_tree_conflicts_${_BASE_BRANCH_NAME}.txt" >&2
        exit 8
    fi

    debug_echo "‚è≥ Deleting ${_CURRENT_PATH}/dependency_tree_${_FEATURE_BRANCH_NAME}.txt"
    rm ${_CURRENT_PATH}/dependency_tree_${_FEATURE_BRANCH_NAME}.txt

    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to delete ${_CURRENT_PATH}/dependency_tree_${_FEATURE_BRANCH_NAME}.txt" >&2
        exit 9
    fi

    debug_echo "‚è≥ Deleting ${_CURRENT_PATH}/dependency_tree_conflicts_${_FEATURE_BRANCH_NAME}.txt"
    rm ${_CURRENT_PATH}/dependency_tree_conflicts_${_FEATURE_BRANCH_NAME}.txt

    if [ $? -ne 0 ]; then
        echo "‚ùå Failed to delete ${_CURRENT_PATH}/dependency_tree_conflicts_${_FEATURE_BRANCH_NAME}.txt" >&2
        exit 10
    fi
else
    debug_echo "‚è© Skipping cleanup (--no-clean-up enabled)"
fi

debug_echo "‚úÖ Done"